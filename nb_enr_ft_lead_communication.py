# Databricks notebook source
# MAGIC %run ./nb_env_config

# COMMAND ----------

spark.sql(f"""DROP VIEW IF EXISTS {UNGOV_TABLE}.{OUTREACH_SCHEMA}.vw_ft_lead_communication""");

spark.sql(f"""DROP TABLE IF EXISTS {UNGOV_TABLE}.{OUTREACH_SCHEMA}.ft_lead_communication""");

# COMMAND ----------

spark.sql(f"""CREATE TABLE IF NOT EXISTS {UNGOV_TABLE}.{OUTREACH_SCHEMA}.ft_lead_communication (
  lead_communication_key BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
  lead_key BIGINT,
  created_on_dt_key BIGINT,
  property_key BIGINT,
  communication_type STRING,
  communication_content STRING,
  sender_name STRING,
  handoff_reason STRING,
  created_on_time TIMESTAMP,
  created_timestamp TIMESTAMP,
  modified_timestamp TIMESTAMP,
  CONSTRAINT `ft_lead_communication_pk` PRIMARY KEY (`lead_communication_key`),
  CONSTRAINT `fk_lead_communication_lead` FOREIGN KEY (`lead_key`) REFERENCES {UNGOV_TABLE}.enr_outreach.dim_lead (`lead_key`),
  CONSTRAINT `fk_lead_communication_date` FOREIGN KEY (`created_on_dt_key`) REFERENCES {GOV_FIN_TABLE}.enr_finance.dim_date (`Day_key`)
)
USING delta
COMMENT 'Lead communication fact table - stores lead communication events from various channels'
TBLPROPERTIES (
  'delta.columnMapping.mode' = 'name',
  'delta.enableDeletionVectors' = 'true',
  'delta.feature.appendOnly' = 'supported',
  'delta.feature.changeDataFeed' = 'supported',
  'delta.feature.checkConstraints' = 'supported',
  'delta.feature.columnMapping' = 'supported',
  'delta.feature.deletionVectors' = 'supported',
  'delta.feature.generatedColumns' = 'supported',
  'delta.feature.identityColumns' = 'supported',
  'delta.feature.invariants' = 'supported',
  'delta.minReaderVersion' = '3',
  'delta.minWriterVersion' = '7'
)""");

spark.sql(f"""CREATE OR REPLACE VIEW {UNGOV_TABLE}.{OUTREACH_SCHEMA}.vw_ft_lead_communication
AS
SELECT
lead_communication_key,
lead_key,
created_on_dt_key,
property_key,
communication_type,
communication_content,
sender_name,
handoff_reason,
created_on_time,
created_timestamp,
modified_timestamp
from dsvc_uat_ungov.enr_outreach.ft_lead_communication""");

# COMMAND ----------

# spark.sql(f"""
# INSERT INTO {UNGOV_TABLE}.{OUTREACH_SCHEMA}.ft_lead_communication
# (lead_key, created_on_dt_key, property_key, communication_type, communication_content, sender_name, handoff_reason, created_on_time, created_timestamp, modified_timestamp)
# WITH unified_communications AS (
#     SELECT 
#         m.EXTERNAL_PROSPECT_ID,
#         ae.LEAD_EMAIL,
#         m.MESSAGE as communication_content,
#         m.SENDER_PARTY as user,
#         ae.AGENT_NAME as agent_name,
#         m.CREATED_AT,
#         m.EVENT_ID,
#         m.Type as communication_type
#     FROM {UNGOV_TABLE}.stg_eliseai.messages m
#     JOIN {UNGOV_TABLE}.stg_eliseai.api_events ae
#         ON ae.EVENT_ID = m.EVENT_ID and ae.EVENT_TYPE IN ('ai_replied', 'ai_sent', 'lead_replied', 'lead_sent')

#     -- UNION ALL

#     -- SELECT 
#     --     vc.EXTERNAL_PROSPECT_ID,
#     --     vc.TRANSCRIPT as communication_content,
#     --     'lead' as user, 
#     --     vc.EVENT_DATETIME as CREATED_AT,
#     --     vc.EVENT_ID,
#     --     'VoiceCall' as communication_type
#     -- FROM {UNGOV_TABLE}.stg_eliseai.voice_calls vc
# )
# SELECT 
#     dl.lead_key as lead_key,
#     IFNULL(dd.day_key, -1) as created_on_dt_key,
#     IFNULL(dp.property_key, -1) as property_key,
#     IFNULL(uc.communication_type, ''),
#     IFNULL(uc.communication_content, ''),
#     CASE 
#         WHEN uc.user = 'agent' THEN COALESCE(uc.agent_name, uc.user)
#         ELSE uc.user 
#     END as sender_name,
#     IFNULL(aho.HANDOFF_REASONS, '') as handoff_reason,
#      CAST(IFNULL(uc.CREATED_AT, '1900-01-01 00:00:00') AS TIMESTAMP)  as created_on_time,
#     current_date() as created_timestamp,
#     current_date() as modified_timestamp
# FROM unified_communications uc
# LEFT JOIN {GOV_OTHERS_TABLE}.stg_microsvc.stg_microsvc_globalid_localsystemid lsi
#     ON lsi.GlobalId = uc.EXTERNAL_PROSPECT_ID 
#     AND lsi.LocalSystemId = '91092eb3-df01-4de6-aaaa-12c7627f4dfa'
# LEFT JOIN {GOV_OTHERS_TABLE}.stg_4operations.stg_4operations_ah4r_prospectproperty pp
#     ON pp.id = lsi.LocalSystemValue
# JOIN {UNGOV_TABLE}.{OUTREACH_SCHEMA}.dim_lead dl
#     ON dl.lead_source_system_id = pp.ah4r_leadid
# -- LEFT JOIN {UNGOV_TABLE}.stg_eliseai.api_events ae 
# --     ON ae.EVENT_ID = uc.EVENT_ID 
# LEFT JOIN {UNGOV_TABLE}.stg_eliseai.api_handoffs aho 
#     ON aho.EVENT_ID = uc.EVENT_ID
# LEFT JOIN {GOV_FIN_TABLE}.cur_property.vw_dim_property dp
#     ON dp.property_number = pp.ah4r_name
# LEFT JOIN {GOV_FIN_TABLE}.cur_finance.vw_dim_date dd
#     ON dd.day_desc = DATE(uc.CREATED_AT)
# """)

# COMMAND ----------

spark.sql(f"""
INSERT INTO {UNGOV_TABLE}.{OUTREACH_SCHEMA}.ft_lead_communication
(lead_key, created_on_dt_key, property_key, communication_type, communication_content, sender_name, handoff_reason, created_on_time, created_timestamp, modified_timestamp)
WITH unified_communications AS (
  SELECT 
    m.EVENT_ID,
    m.EXTERNAL_PROSPECT_ID,
    lower(trim(ae.LEAD_EMAIL))    AS lead_email_norm,
    ae.LEAD_PHONE_NUMBER          AS raw_lead_phone,
    m.MESSAGE                     AS communication_content,
    m.SENDER_PARTY                AS user,
    ae.AGENT_NAME                 AS agent_name,
    m.CREATED_AT,
    m.Type                        AS communication_type
  FROM {UNGOV_TABLE}.stg_eliseai.messages m
  JOIN {UNGOV_TABLE}.stg_eliseai.api_events ae
    ON ae.EVENT_ID = m.EVENT_ID 
   AND ae.EVENT_TYPE IN ('ai_replied','ai_sent','lead_replied','lead_sent')
),
formatted_phones AS (
  SELECT
    uc.*,
    CASE 
      WHEN uc.raw_lead_phone IS NULL OR trim(uc.raw_lead_phone) = '' THEN NULL
      WHEN length(regexp_replace(uc.raw_lead_phone,'[^0-9]','')) = 11 
         AND left(regexp_replace(uc.raw_lead_phone,'[^0-9]',''),1) = '1' 
        THEN concat('+1', substring(regexp_replace(uc.raw_lead_phone,'[^0-9]',''),2))
      WHEN length(regexp_replace(uc.raw_lead_phone,'[^0-9]','')) = 10 
        THEN concat('+1', regexp_replace(uc.raw_lead_phone,'[^0-9]',''))
      WHEN length(regexp_replace(uc.raw_lead_phone,'[^0-9]','')) > 11
        THEN concat('+', regexp_replace(uc.raw_lead_phone,'[^0-9]',''))
      ELSE NULL
    END AS lead_phone_norm
  FROM unified_communications uc
),
dim_lead_email AS (
  SELECT lead_key, lower(trim(lead_email)) AS lead_email_norm
  FROM {UNGOV_TABLE}.{OUTREACH_SCHEMA}.dim_lead
  WHERE lead_email IS NOT NULL AND trim(lead_email) <> ''
),
dim_lead_phone AS (
  SELECT *
  FROM (
    SELECT
      dl.lead_key,
      CASE 
        WHEN p IS NULL OR trim(p) = '' THEN NULL
        WHEN length(regexp_replace(p,'[^0-9]','')) = 11 
             AND left(regexp_replace(p,'[^0-9]',''),1) = '1' 
          THEN concat('+1', substring(regexp_replace(p,'[^0-9]',''),2))
        WHEN length(regexp_replace(p,'[^0-9]','')) = 10 
          THEN concat('+1', regexp_replace(p,'[^0-9]',''))
        WHEN length(regexp_replace(p,'[^0-9]','')) > 11
          THEN concat('+', regexp_replace(p,'[^0-9]',''))
        ELSE NULL
      END AS phone_norm
    FROM {UNGOV_TABLE}.{OUTREACH_SCHEMA}.dim_lead dl
    LATERAL VIEW explode(array(dl.lead_telephone1, dl.lead_telephone2, dl.lead_mobilephone)) lv AS p
  ) t
  WHERE phone_norm IS NOT NULL
),

base_match AS (
  SELECT
    fp.*,
    lsi.GlobalId,
    pp.ah4r_leadid,
    pp.ah4r_name AS property_number,
    dlp.lead_key AS lead_key_phone,
    dle.lead_key AS lead_key_email,
    dlp.lead_key IS NOT NULL AS has_phone_match,
    dle.lead_key IS NOT NULL AS has_email_match
  FROM formatted_phones fp
  LEFT JOIN {GOV_OTHERS_TABLE}.stg_microsvc.stg_microsvc_globalid_localsystemid lsi
    ON lsi.GlobalId = fp.EXTERNAL_PROSPECT_ID 
   AND lsi.LocalSystemId = '91092eb3-df01-4de6-aaaa-12c7627f4dfa'
  LEFT JOIN {GOV_OTHERS_TABLE}.stg_4operations.stg_4operations_ah4r_prospectproperty pp
    ON pp.id = lsi.LocalSystemValue
  LEFT JOIN {UNGOV_TABLE}.{OUTREACH_SCHEMA}.dim_lead dl_primary
    ON dl_primary.lead_source_system_id = pp.ah4r_leadid
  LEFT JOIN dim_lead_email  dle
    ON fp.lead_email_norm IS NOT NULL AND dle.lead_email_norm = fp.lead_email_norm
  LEFT JOIN dim_lead_phone  dlp
    ON fp.lead_phone_norm IS NOT NULL AND dlp.phone_norm = fp.lead_phone_norm
),
lead_matching AS (
  SELECT
    bm.*,
    row_number() over (
      partition by bm.EVENT_ID
      order by
        case 
          when bm.ah4r_leadid is not null then 1
          when bm.has_email_match      then 2
          when bm.has_phone_match      then 3
          else 4
        end
    ) as match_rank,
    coalesce(dl_primary.lead_key, bm.lead_key_email, bm.lead_key_phone) as matched_lead_key
  FROM base_match bm
  LEFT JOIN {UNGOV_TABLE}.{OUTREACH_SCHEMA}.dim_lead dl_primary
    ON dl_primary.lead_source_system_id = bm.ah4r_leadid
)
SELECT 
  lm.matched_lead_key as lead_key,
  coalesce(dd.day_key, -1) as created_on_dt_key,
  coalesce(dp.property_key, -1) as property_key,
  coalesce(lm.communication_type, '') as communication_type,
  coalesce(trim(lm.communication_content), '') as communication_content,
  case when lm.user = 'agent' then coalesce(lm.agent_name, lm.user) else lm.user end as sender_name,
  coalesce(replace(array_join(from_json(aho.HANDOFF_REASONS,'array<string>'), ', '), '_',' '), '') as handoff_reason,
  cast(coalesce(lm.CREATED_AT, timestamp('1900-01-01 00:00:00')) as timestamp) as created_on_time,
  current_date() as created_timestamp,
  current_date() as modified_timestamp
FROM lead_matching lm
LEFT JOIN {UNGOV_TABLE}.stg_eliseai.api_handoffs aho ON aho.EVENT_ID = lm.EVENT_ID
LEFT JOIN {GOV_FIN_TABLE}.cur_finance.vw_dim_date dd ON dd.day_desc = date(lm.CREATED_AT)
LEFT JOIN {GOV_FIN_TABLE}.cur_property.vw_dim_property dp ON dp.property_number = lm.property_number
WHERE lm.match_rank = 1 AND lm.matched_lead_key IS NOT NULL;
""")

# COMMAND ----------

# #Latest version
# spark.sql(f"""
# INSERT INTO {UNGOV_TABLE}.{OUTREACH_SCHEMA}.ft_lead_communication
# (lead_key, created_on_dt_key, property_key, communication_type, communication_content, sender_name, handoff_reason, created_on_time, created_timestamp, modified_timestamp)
# WITH unified_communications AS (
#     SELECT 
#         m.EXTERNAL_PROSPECT_ID,
#         LOWER(TRIM(ae.LEAD_EMAIL)) as LEAD_EMAIL,
#         ae.LEAD_PHONE_NUMBER,
#         m.MESSAGE as communication_content,
#         m.SENDER_PARTY as user,
#         ae.AGENT_NAME as agent_name,
#         m.CREATED_AT,
#         m.EVENT_ID,
#         m.Type as communication_type
#     FROM {UNGOV_TABLE}.stg_eliseai.messages m
#     JOIN {UNGOV_TABLE}.stg_eliseai.api_events ae
#         ON ae.EVENT_ID = m.EVENT_ID and ae.EVENT_TYPE IN ('ai_replied', 'ai_sent', 'lead_replied', 'lead_sent')
# ),
# -- Format phone numbers for matching
# formatted_phones AS (
#     SELECT 
#         uc.*,
#         -- Format the incoming phone number from api_events
#         CASE 
#             WHEN uc.LEAD_PHONE_NUMBER IS NULL OR TRIM(uc.LEAD_PHONE_NUMBER) = '' THEN ''
#             WHEN LENGTH(REGEXP_REPLACE(uc.LEAD_PHONE_NUMBER, '[^0-9]', '')) = 11 
#                  AND LEFT(REGEXP_REPLACE(uc.LEAD_PHONE_NUMBER, '[^0-9]', ''), 1) = '1' 
#             THEN CONCAT('+1', SUBSTRING(REGEXP_REPLACE(uc.LEAD_PHONE_NUMBER, '[^0-9]', ''), 2))
#             WHEN LENGTH(REGEXP_REPLACE(uc.LEAD_PHONE_NUMBER, '[^0-9]', '')) = 10 
#             THEN CONCAT('+1', REGEXP_REPLACE(uc.LEAD_PHONE_NUMBER, '[^0-9]', ''))
#             WHEN LENGTH(REGEXP_REPLACE(uc.LEAD_PHONE_NUMBER, '[^0-9]', '')) > 11
#             THEN CONCAT('+', REGEXP_REPLACE(uc.LEAD_PHONE_NUMBER, '[^0-9]', ''))
#             ELSE IFNULL(uc.LEAD_PHONE_NUMBER, '')
#         END as formatted_lead_phone
#     FROM unified_communications uc
# ),
# -- Find the best matching lead for each communication
# lead_matching AS (
#     SELECT 
#         fp.*,
#         -- Use ROW_NUMBER to get only one match per communication
#         ROW_NUMBER() OVER (
#             PARTITION BY fp.EVENT_ID 
#             ORDER BY 
#                 -- Prioritize matches: 1=primary, 2=email, 3=phone1, 4=phone2, 5=phone3
#                 CASE 
#                     WHEN dl_primary.lead_key IS NOT NULL THEN 1
#                     WHEN dl_email.lead_key IS NOT NULL THEN 2
#                     WHEN dl_phone1.lead_key IS NOT NULL THEN 3
#                     WHEN dl_phone2.lead_key IS NOT NULL THEN 4
#                     WHEN dl_phone3.lead_key IS NOT NULL THEN 5
#                     ELSE 6
#                 END
#         ) as match_rank,
#         COALESCE(
#             dl_primary.lead_key,
#             dl_email.lead_key,
#             dl_phone1.lead_key,
#             dl_phone2.lead_key,
#             dl_phone3.lead_key
#         ) as matched_lead_key,
#         pp.ah4r_name as property_number
#     FROM formatted_phones fp
#     -- Primary join path through localsystemid
#     LEFT JOIN {GOV_OTHERS_TABLE}.stg_microsvc.stg_microsvc_globalid_localsystemid lsi
#         ON lsi.GlobalId = fp.EXTERNAL_PROSPECT_ID 
#         AND lsi.LocalSystemId = '91092eb3-df01-4de6-aaaa-12c7627f4dfa'
#     LEFT JOIN {GOV_OTHERS_TABLE}.stg_4operations.stg_4operations_ah4r_prospectproperty pp
#         ON pp.id = lsi.LocalSystemValue
#     LEFT JOIN {UNGOV_TABLE}.{OUTREACH_SCHEMA}.dim_lead dl_primary
#         ON dl_primary.lead_source_system_id = pp.ah4r_leadid
        
#     -- Email fallback join
#     LEFT JOIN {UNGOV_TABLE}.{OUTREACH_SCHEMA}.dim_lead dl_email
#         ON fp.LEAD_EMAIL IS NOT NULL
#         AND dl_email.lead_email = fp.LEAD_EMAIL
        
#     -- Phone fallback joins (telephone1)
#     LEFT JOIN {UNGOV_TABLE}.{OUTREACH_SCHEMA}.dim_lead dl_phone1
#         ON fp.formatted_lead_phone != ''
#         AND CASE 
#             WHEN dl_phone1.lead_telephone1 IS NULL OR TRIM(dl_phone1.lead_telephone1) = '' THEN ''
#             WHEN LENGTH(REGEXP_REPLACE(dl_phone1.lead_telephone1, '[^0-9]', '')) = 11 
#                  AND LEFT(REGEXP_REPLACE(dl_phone1.lead_telephone1, '[^0-9]', ''), 1) = '1' 
#             THEN CONCAT('+1', SUBSTRING(REGEXP_REPLACE(dl_phone1.lead_telephone1, '[^0-9]', ''), 2))
#             WHEN LENGTH(REGEXP_REPLACE(dl_phone1.lead_telephone1, '[^0-9]', '')) = 10 
#             THEN CONCAT('+1', REGEXP_REPLACE(dl_phone1.lead_telephone1, '[^0-9]', ''))
#             WHEN LENGTH(REGEXP_REPLACE(dl_phone1.lead_telephone1, '[^0-9]', '')) > 11
#             THEN CONCAT('+', REGEXP_REPLACE(dl_phone1.lead_telephone1, '[^0-9]', ''))
#             ELSE IFNULL(dl_phone1.lead_telephone1, '')
#         END = fp.formatted_lead_phone
        
#     -- Phone fallback joins (telephone2)
#     LEFT JOIN {UNGOV_TABLE}.{OUTREACH_SCHEMA}.dim_lead dl_phone2
#         ON fp.formatted_lead_phone != ''
#         AND CASE 
#             WHEN dl_phone2.lead_telephone2 IS NULL OR TRIM(dl_phone2.lead_telephone2) = '' THEN ''
#             WHEN LENGTH(REGEXP_REPLACE(dl_phone2.lead_telephone2, '[^0-9]', '')) = 11 
#                  AND LEFT(REGEXP_REPLACE(dl_phone2.lead_telephone2, '[^0-9]', ''), 1) = '1' 
#             THEN CONCAT('+1', SUBSTRING(REGEXP_REPLACE(dl_phone2.lead_telephone2, '[^0-9]', ''), 2))
#             WHEN LENGTH(REGEXP_REPLACE(dl_phone2.lead_telephone2, '[^0-9]', '')) = 10 
#             THEN CONCAT('+1', REGEXP_REPLACE(dl_phone2.lead_telephone2, '[^0-9]', ''))
#             WHEN LENGTH(REGEXP_REPLACE(dl_phone2.lead_telephone2, '[^0-9]', '')) > 11
#             THEN CONCAT('+', REGEXP_REPLACE(dl_phone2.lead_telephone2, '[^0-9]', ''))
#             ELSE IFNULL(dl_phone2.lead_telephone2, '')
#         END = fp.formatted_lead_phone
        
#     -- Phone fallback joins (mobilephone)
#     LEFT JOIN {UNGOV_TABLE}.{OUTREACH_SCHEMA}.dim_lead dl_phone3
#         ON fp.formatted_lead_phone != ''
#         AND CASE 
#             WHEN dl_phone3.lead_mobilephone IS NULL OR TRIM(dl_phone3.lead_mobilephone) = '' THEN ''
#             WHEN LENGTH(REGEXP_REPLACE(dl_phone3.lead_mobilephone, '[^0-9]', '')) = 11 
#                  AND LEFT(REGEXP_REPLACE(dl_phone3.lead_mobilephone, '[^0-9]', ''), 1) = '1' 
#             THEN CONCAT('+1', SUBSTRING(REGEXP_REPLACE(dl_phone3.lead_mobilephone, '[^0-9]', ''), 2))
#             WHEN LENGTH(REGEXP_REPLACE(dl_phone3.lead_mobilephone, '[^0-9]', '')) = 10 
#             THEN CONCAT('+1', REGEXP_REPLACE(dl_phone3.lead_mobilephone, '[^0-9]', ''))
#             WHEN LENGTH(REGEXP_REPLACE(dl_phone3.lead_mobilephone, '[^0-9]', '')) > 11
#             THEN CONCAT('+', REGEXP_REPLACE(dl_phone3.lead_mobilephone, '[^0-9]', ''))
#             ELSE IFNULL(dl_phone3.lead_mobilephone, '')
#         END = fp.formatted_lead_phone
# )
# SELECT 
#     lm.matched_lead_key as lead_key,
#     IFNULL(dd.day_key, -1) as created_on_dt_key,
#     IFNULL(dp.property_key, -1) as property_key,
#     IFNULL(lm.communication_type, ''),
#     IFNULL(TRIM(lm.communication_content), ''),
#     CASE 
#         WHEN lm.user = 'agent' THEN COALESCE(lm.agent_name, lm.user)
#         ELSE lm.user 
#     END as sender_name,
#     IFNULL(replace(array_join(from_json(HANDOFF_REASONS, 'array<string>'), ', '), '_', ' '), '') as handoff_reason,
#     CAST(IFNULL(lm.CREATED_AT, '1900-01-01 00:00:00') AS TIMESTAMP) as created_on_time,
#     current_date() as created_timestamp,
#     current_date() as modified_timestamp
# FROM lead_matching lm
# -- Other joins
# -- LEFT JOIN {UNGOV_TABLE}.stg_eliseai.api_events ae 
# --     ON ae.EVENT_ID = lm.EVENT_ID 
# LEFT JOIN {UNGOV_TABLE}.stg_eliseai.api_handoffs aho 
#     ON aho.EVENT_ID = lm.EVENT_ID
# LEFT JOIN {GOV_FIN_TABLE}.cur_property.vw_dim_property dp
#     ON dp.property_number = lm.property_number
# LEFT JOIN {GOV_FIN_TABLE}.cur_finance.vw_dim_date dd
#     ON dd.day_desc = DATE(lm.CREATED_AT)
# -- Only include the best match for each communication
# WHERE lm.match_rank = 1
#     AND lm.matched_lead_key IS NOT NULL
# """)