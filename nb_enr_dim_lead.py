# Databricks notebook source
# MAGIC %run ./nb_env_config

# COMMAND ----------

# spark.sql(f"""DROP VIEW IF EXISTS {UNGOV_TABLE}.{OUTREACH_SCHEMA}.vw_dim_lead""");

# spark.sql(f"""DROP TABLE IF EXISTS {UNGOV_TABLE}.{OUTREACH_SCHEMA}.dim_lead""");

# COMMAND ----------

spark.sql(f"""CREATE SCHEMA IF NOT EXISTS {UNGOV_TABLE}.{OUTREACH_SCHEMA} 
COMMENT 'Enriched outreach schema - contains dimension and fact tables for leads'""");

spark.sql(f"""CREATE TABLE IF NOT EXISTS {UNGOV_TABLE}.{OUTREACH_SCHEMA}.dim_lead (
  lead_key BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
  lead_first_name STRING,
  lead_last_name STRING,
  lead_email STRING,
  lead_telephone1 STRING,
  lead_telephone2 STRING,
  lead_mobilephone STRING,
  lead_initial_referral_source STRING,
  lead_created_on TIMESTAMP,
  lead_created_by STRING,
  lead_state STRING,
  lead_status STRING,
  lead_preferred_location STRING,
  lead_move_in_date TIMESTAMP,
  lead_source_system_id STRING,
  lead_source_system STRING,
  lead_last_activity_date TIMESTAMP,
  created_timestamp TIMESTAMP,
  modified_timestamp TIMESTAMP,
  CONSTRAINT `dim_lead_pk` PRIMARY KEY (`lead_key`)
)
USING delta
COMMENT 'Lead dimension table - stores lead information from various source systems'
TBLPROPERTIES (
  'delta.columnMapping.mode' = 'name',
  'delta.enableDeletionVectors' = 'true',
  'delta.feature.appendOnly' = 'supported',
  'delta.feature.changeDataFeed' = 'supported',
  'delta.feature.checkConstraints' = 'supported',
  'delta.feature.columnMapping' = 'supported',
  'delta.feature.deletionVectors' = 'supported',
  'delta.feature.generatedColumns' = 'supported',
  'delta.feature.identityColumns' = 'supported',
  'delta.feature.invariants' = 'supported',
  'delta.minReaderVersion' = '3',
  'delta.minWriterVersion' = '7'
)""");

spark.sql(f"""CREATE OR REPLACE VIEW {UNGOV_TABLE}.{OUTREACH_SCHEMA}.vw_dim_lead
AS
SELECT
lead_key  ,
lead_first_name ,
lead_last_name  ,
lead_email  ,
lead_telephone1 ,
lead_telephone2 ,
lead_mobilephone  ,
lead_initial_referral_source  ,
lead_created_on ,
lead_created_by ,
lead_state  ,
lead_status ,
lead_preferred_location ,
lead_move_in_date ,
lead_source_system_id ,
lead_source_system  ,
lead_last_activity_date ,
created_timestamp ,
modified_timestamp  
from {UNGOV_TABLE}.{OUTREACH_SCHEMA}.dim_lead""");

# COMMAND ----------

# #Adds in 4Ops leads

# spark.sql(f"""
# INSERT INTO {UNGOV_TABLE}.{OUTREACH_SCHEMA}.dim_lead
# (lead_first_name, lead_last_name, lead_email, lead_telephone1, lead_telephone2, 
# lead_mobilephone, lead_initial_referral_source, lead_created_on, lead_created_by, 
# lead_state, lead_status, lead_preferred_location, lead_move_in_date, 
# lead_source_system_id, lead_source_system, lead_last_activity_date, 
# created_timestamp, modified_timestamp)
# WITH lead_property_activity AS (
#     SELECT 
#         COALESCE(pp.ah4r_leadid, opp.originatingleadid) as leadid,
#         pp.createdon as property_activity_date
#     FROM {GOV_OTHERS_TABLE}.stg_4operations.stg_4operations_ah4r_prospectproperty pp
#     LEFT JOIN {GOV_OTHERS_TABLE}.stg_4operations.stg_4operations_opportunity opp
#         ON pp.ah4r_opportunityid = opp.id 
#         AND pp.ah4r_leadid IS NULL
#     WHERE pp.createdon >= '2025-01-01' 
#       AND pp.createdon < '2025-07-01'
#       AND COALESCE(pp.ah4r_leadid, opp.originatingleadid) IS NOT NULL
# ),
# filtered_leads AS (
#     SELECT DISTINCT
#         l.leadid,
#         l.createdon,
#         MAX(lpa.property_activity_date) as last_property_activity
#     FROM {GOV_OTHERS_TABLE}.stg_4operations.stg_4operations_lead l
#     LEFT JOIN lead_property_activity lpa
#         ON l.leadid = lpa.leadid
#     WHERE l.emailaddress1 IS NOT NULL
#       AND (
#         (l.createdon >= '2025-01-01' AND l.createdon < '2025-07-01')
#         OR lpa.leadid IS NOT NULL
#       )
#     GROUP BY l.leadid, l.createdon
# )
# SELECT 
#     CASE 
#         WHEN l.firstname IS NULL OR TRIM(l.firstname) = '' THEN ''
#         ELSE INITCAP(TRIM(l.firstname))
#     END as lead_first_name,
    
#     CASE 
#         WHEN l.lastname IS NULL OR TRIM(l.lastname) = '' THEN ''
#         ELSE INITCAP(TRIM(l.lastname))
#     END as lead_last_name,
    
#     CASE 
#         WHEN l.emailaddress1 IS NULL OR TRIM(l.emailaddress1) = '' THEN ''
#         ELSE LOWER(TRIM(l.emailaddress1))
#     END as lead_email,
    
#     CASE 
#         WHEN l.telephone1 IS NULL OR TRIM(l.telephone1) = '' THEN ''
#         WHEN LENGTH(REGEXP_REPLACE(l.telephone1, '[^0-9]', '')) = 11 
#              AND LEFT(REGEXP_REPLACE(l.telephone1, '[^0-9]', ''), 1) = '1' 
#         THEN CONCAT('+1', SUBSTRING(REGEXP_REPLACE(l.telephone1, '[^0-9]', ''), 2))
#         WHEN LENGTH(REGEXP_REPLACE(l.telephone1, '[^0-9]', '')) = 10 
#         THEN CONCAT('+1', REGEXP_REPLACE(l.telephone1, '[^0-9]', ''))
#         WHEN LENGTH(REGEXP_REPLACE(l.telephone1, '[^0-9]', '')) > 11
#         THEN CONCAT('+', REGEXP_REPLACE(l.telephone1, '[^0-9]', ''))
#         ELSE IFNULL(l.telephone1, '')
#     END as lead_telephone1,
    
#     CASE 
#         WHEN l.telephone2 IS NULL OR TRIM(l.telephone2) = '' THEN ''
#         WHEN LENGTH(REGEXP_REPLACE(l.telephone2, '[^0-9]', '')) = 11 
#              AND LEFT(REGEXP_REPLACE(l.telephone2, '[^0-9]', ''), 1) = '1' 
#         THEN CONCAT('+1', SUBSTRING(REGEXP_REPLACE(l.telephone2, '[^0-9]', ''), 2))
#         WHEN LENGTH(REGEXP_REPLACE(l.telephone2, '[^0-9]', '')) = 10 
#         THEN CONCAT('+1', REGEXP_REPLACE(l.telephone2, '[^0-9]', ''))
#         WHEN LENGTH(REGEXP_REPLACE(l.telephone2, '[^0-9]', '')) > 11
#         THEN CONCAT('+', REGEXP_REPLACE(l.telephone2, '[^0-9]', ''))
#         ELSE IFNULL(l.telephone2, '')
#     END as lead_telephone2,
    
#     CASE 
#         WHEN l.mobilephone IS NULL OR TRIM(l.mobilephone) = '' THEN ''
#         WHEN LENGTH(REGEXP_REPLACE(l.mobilephone, '[^0-9]', '')) = 11 
#              AND LEFT(REGEXP_REPLACE(l.mobilephone, '[^0-9]', ''), 1) = '1' 
#         THEN CONCAT('+1', SUBSTRING(REGEXP_REPLACE(l.mobilephone, '[^0-9]', ''), 2))
#         WHEN LENGTH(REGEXP_REPLACE(l.mobilephone, '[^0-9]', '')) = 10 
#         THEN CONCAT('+1', REGEXP_REPLACE(l.mobilephone, '[^0-9]', ''))
#         WHEN LENGTH(REGEXP_REPLACE(l.mobilephone, '[^0-9]', '')) > 11
#         THEN CONCAT('+', REGEXP_REPLACE(l.mobilephone, '[^0-9]', ''))
#         ELSE IFNULL(l.mobilephone, '')
#     END as lead_mobilephone,
#     IFNULL(l.ah4r_prospectsourcename, '') as lead_initial_referral_source,
#     CAST(IFNULL(l.createdon, '1900-01-01 00:00:00') AS TIMESTAMP) as lead_created_on,
#     IFNULL(l.createdbyname, '') as lead_created_by,
#     IFNULL(statemd.LocalizedLabel, '') as lead_state,
#     IFNULL(statusmd.LocalizedLabel, '') as lead_status,
#     IFNULL(l.ah4r_preferredlocation, '') as lead_preferred_location,
#     CAST(IFNULL(l.ah4r_moveindate, '1900-01-01 00:00:00') AS TIMESTAMP) as lÃ§,
#     IFNULL(fl.leadid, '-1') as lead_source_system_id,
#     '4ops' as lead_source_system,
#     CASE 
#         WHEN fl.last_property_activity IS NULL THEN CAST(IFNULL(fl.createdon, '1900-01-01 00:00:00') AS TIMESTAMP)
#         WHEN fl.createdon > fl.last_property_activity THEN CAST(IFNULL(fl.createdon, '1900-01-01 00:00:00') AS TIMESTAMP)
#         ELSE CAST(IFNULL(fl.last_property_activity, '1900-01-01 00:00:00') AS TIMESTAMP)
#     END as lead_last_activity_date,
#     CAST(current_timestamp() AS TIMESTAMP) as created_timestamp,
#     CAST(current_timestamp() AS TIMESTAMP) as modified_timestamp
# FROM filtered_leads fl
# JOIN {GOV_OTHERS_TABLE}.stg_4operations.stg_4operations_lead l
#     ON l.leadid = fl.leadid 
# LEFT JOIN {GOV_OTHERS_TABLE}.stg_4operations.stg_4operations_statemetadata statemd
#     ON statemd.EntityName = 'lead' and statemd.State = l.statecode
# LEFT JOIN {GOV_OTHERS_TABLE}.stg_4operations.stg_4operations_statusmetadata statusmd
#     ON statusmd.EntityName = 'lead' and statusmd.Status = l.statuscode
# LEFT JOIN {GOV_FIN_TABLE}.enr_finance.dim_date dd
#     ON dd.day_desc = DATE(l.createdon)
# """);

# COMMAND ----------

#Adds in 4ops after Legacy
spark.sql(f"""
WITH lead_property_activity AS (
    /* Prospect property rows + region + region-specific start date */
    SELECT 
        COALESCE(pp.ah4r_leadid, opp.originatingleadid)                              AS leadid,
        pp.createdon                                                                 AS property_activity_date,
        g.region_name,
        CASE
            WHEN g.region_name IN ('Texas','Western')              THEN DATE '2023-09-11'
            WHEN g.region_name = 'Southeast'                       THEN DATE '2023-10-10'
            WHEN g.region_name IN ('Midwest','Carolinas')          THEN DATE '2023-10-23'
            WHEN g.region_name = 'Florida'                         THEN DATE '2023-11-07'
            ELSE DATE '2023-08-07'  -- fallback (unknown/missing region)
        END                                                                            AS region_start_date
    FROM {GOV_OTHERS_TABLE}.stg_4operations.stg_4operations_ah4r_prospectproperty pp
    LEFT JOIN {GOV_OTHERS_TABLE}.stg_4operations.stg_4operations_opportunity opp
      ON pp.ah4r_opportunityid = opp.id 
     AND pp.ah4r_leadid IS NULL
    LEFT JOIN {GOV_FIN_TABLE}.enr_property.dim_property p
      ON p.property_number = pp.ah4r_name              -- <-- replace if your column differs
    LEFT JOIN {GOV_FIN_TABLE}.enr_property.dim_geography g
      ON g.geo_key = p.current_geo_key
    WHERE
        COALESCE(pp.ah4r_leadid, opp.originatingleadid) IS NOT NULL
        AND pp.createdon >= 
            CASE
                WHEN g.region_name IN ('Texas','Western')     THEN TIMESTAMP '2023-09-11 00:00:00'
                WHEN g.region_name = 'Southeast'              THEN TIMESTAMP '2023-10-10 00:00:00'
                WHEN g.region_name IN ('Midwest','Carolinas') THEN TIMESTAMP '2023-10-23 00:00:00'
                WHEN g.region_name = 'Florida'                THEN TIMESTAMP '2023-11-07 00:00:00'
                ELSE TIMESTAMP '2023-08-07 00:00:00' -- fallback when no property/region
            END
        --AND pp.createdon < TIMESTAMP '2025-07-01 00:00:00'  -- inclusive through 2025-06-30
),
filtered_leads AS (
    /* Keep leads if:
       - they have ANY property activity in-window (per-region), OR
       - they were created in the DEFAULT window (no property â default start 2023-11-07)
    */
    SELECT DISTINCT
        l.leadid,
        l.createdon,
        MAX(lpa.property_activity_date) AS last_property_activity
    FROM {GOV_OTHERS_TABLE}.stg_4operations.stg_4operations_lead l
    LEFT JOIN lead_property_activity lpa
      ON l.leadid = lpa.leadid
    WHERE l.emailaddress1 IS NOT NULL
      AND (
            -- default window for leads with no qualifying property rows
            (l.createdon >= TIMESTAMP '2023-08-07 00:00:00') --AND l.createdon < TIMESTAMP '2025-07-01 00:00:00')
            OR lpa.leadid IS NOT NULL  -- has qualifying property activity per region rules
          )
    GROUP BY l.leadid, l.createdon
),
src_raw AS (
    /* Your existing shaping/normalization logic (unchanged except date window above) */
    SELECT 
        LOWER(TRIM(l.emailaddress1)) AS email_key,

        CASE WHEN l.firstname IS NULL OR TRIM(l.firstname)  = '' THEN '' ELSE INITCAP(TRIM(l.firstname))  END AS lead_first_name,
        CASE WHEN l.lastname  IS NULL OR TRIM(l.lastname)   = '' THEN '' ELSE INITCAP(TRIM(l.lastname))   END AS lead_last_name,

        CASE WHEN l.emailaddress1 IS NULL OR TRIM(l.emailaddress1) = '' THEN '' ELSE LOWER(TRIM(l.emailaddress1)) END AS lead_email,

        CASE 
            WHEN l.telephone1 IS NULL OR TRIM(l.telephone1) = '' THEN ''
            WHEN LENGTH(REGEXP_REPLACE(l.telephone1, '[^0-9]', '')) = 11 AND LEFT(REGEXP_REPLACE(l.telephone1, '[^0-9]', ''), 1) = '1' 
                THEN CONCAT('+1', SUBSTRING(REGEXP_REPLACE(l.telephone1, '[^0-9]', ''), 2))
            WHEN LENGTH(REGEXP_REPLACE(l.telephone1, '[^0-9]', '')) = 10 
                THEN CONCAT('+1', REGEXP_REPLACE(l.telephone1, '[^0-9]', ''))
            WHEN LENGTH(REGEXP_REPLACE(l.telephone1, '[^0-9]', '')) > 11
                THEN CONCAT('+', REGEXP_REPLACE(l.telephone1, '[^0-9]', ''))
            ELSE IFNULL(l.telephone1, '')
        END AS lead_telephone1,

        CASE 
            WHEN l.telephone2 IS NULL OR TRIM(l.telephone2) = '' THEN ''
            WHEN LENGTH(REGEXP_REPLACE(l.telephone2, '[^0-9]', '')) = 11 AND LEFT(REGEXP_REPLACE(l.telephone2, '[^0-9]', ''), 1) = '1' 
                THEN CONCAT('+1', SUBSTRING(REGEXP_REPLACE(l.telephone2, '[^0-9]', ''), 2))
            WHEN LENGTH(REGEXP_REPLACE(l.telephone2, '[^0-9]', '')) = 10 
                THEN CONCAT('+1', REGEXP_REPLACE(l.telephone2, '[^0-9]', ''))
            WHEN LENGTH(REGEXP_REPLACE(l.telephone2, '[^0-9]', '')) > 11
                THEN CONCAT('+', REGEXP_REPLACE(l.telephone2, '[^0-9]', ''))
            ELSE IFNULL(l.telephone2, '')
        END AS lead_telephone2,

        CASE 
            WHEN l.mobilephone IS NULL OR TRIM(l.mobilephone) = '' THEN ''
            WHEN LENGTH(REGEXP_REPLACE(l.mobilephone, '[^0-9]', '')) = 11 AND LEFT(REGEXP_REPLACE(l.mobilephone, '[^0-9]', ''), 1) = '1' 
                THEN CONCAT('+1', SUBSTRING(REGEXP_REPLACE(l.mobilephone, '[^0-9]', ''), 2))
            WHEN LENGTH(REGEXP_REPLACE(l.mobilephone, '[^0-9]', '')) = 10 
                THEN CONCAT('+1', REGEXP_REPLACE(l.mobilephone, '[^0-9]', ''))
            WHEN LENGTH(REGEXP_REPLACE(l.mobilephone, '[^0-9]', '')) > 11
                THEN CONCAT('+', REGEXP_REPLACE(l.mobilephone, '[^0-9]', ''))
            ELSE IFNULL(l.mobilephone, '')
        END AS lead_mobilephone,

        IFNULL(l.ah4r_prospectsourcename, '') AS lead_initial_referral_source,      -- keep legacy on match
        CAST(IFNULL(l.createdon, '1900-01-01 00:00:00') AS TIMESTAMP) AS lead_created_on,   -- keep legacy on match
        IFNULL(l.createdbyname, '') AS lead_created_by,                               -- keep legacy on match
        IFNULL(statemd.LocalizedLabel, '') AS lead_state,
        IFNULL(statusmd.LocalizedLabel, '') AS lead_status,
        IFNULL(l.ah4r_preferredlocation, '') AS lead_preferred_location,             -- keep legacy on match
        CAST(IFNULL(l.ah4r_moveindate, '1900-01-01 00:00:00') AS TIMESTAMP) AS lead_move_in_date, -- keep legacy on match
        IFNULL(fl.leadid, '-1') AS lead_source_system_id,
        '4ops' AS lead_source_system,
        CASE 
            WHEN fl.last_property_activity IS NULL THEN CAST(IFNULL(fl.createdon, '1900-01-01 00:00:00') AS TIMESTAMP)
            WHEN fl.createdon > fl.last_property_activity THEN CAST(IFNULL(fl.createdon, '1900-01-01 00:00:00') AS TIMESTAMP)
            ELSE CAST(IFNULL(fl.last_property_activity, '1900-01-01 00:00:00') AS TIMESTAMP)
        END AS lead_last_activity_date
    FROM filtered_leads fl
    JOIN {GOV_OTHERS_TABLE}.stg_4operations.stg_4operations_lead l
      ON l.leadid = fl.leadid 
    LEFT JOIN {GOV_OTHERS_TABLE}.stg_4operations.stg_4operations_statemetadata statemd
      ON statemd.EntityName = 'lead' AND statemd.State  = l.statecode
    LEFT JOIN {GOV_OTHERS_TABLE}.stg_4operations.stg_4operations_statusmetadata statusmd
      ON statusmd.EntityName = 'lead' AND statusmd.Status = l.statuscode
    LEFT JOIN {GOV_FIN_TABLE}.enr_finance.dim_date dd
      ON dd.day_desc = DATE(l.createdon)
    WHERE l.emailaddress1 IS NOT NULL AND TRIM(l.emailaddress1) <> ''
)

MERGE INTO {UNGOV_TABLE}.{OUTREACH_SCHEMA}.dim_lead AS tgt
USING (
    SELECT
        email_key,
        lead_first_name,
        lead_last_name,
        lead_email,
        lead_telephone1,
        lead_telephone2,
        lead_mobilephone,
        lead_initial_referral_source,
        lead_created_on,
        lead_created_by,
        lead_state,
        lead_status,
        lead_preferred_location,
        lead_move_in_date,
        lead_source_system_id,
        lead_source_system,
        lead_last_activity_date
    FROM src_raw
) AS src
ON LOWER(tgt.lead_email) = src.email_key

WHEN MATCHED THEN UPDATE SET
    tgt.lead_first_name         = COALESCE(NULLIF(src.lead_first_name,  ''), tgt.lead_first_name),
    tgt.lead_last_name          = COALESCE(NULLIF(src.lead_last_name,   ''), tgt.lead_last_name),
    tgt.lead_telephone1         = COALESCE(NULLIF(src.lead_telephone1,  ''), tgt.lead_telephone1),
    tgt.lead_telephone2         = COALESCE(NULLIF(src.lead_telephone2,  ''), tgt.lead_telephone2),
    tgt.lead_mobilephone        = COALESCE(NULLIF(src.lead_mobilephone, ''), tgt.lead_mobilephone),
    tgt.lead_state              = COALESCE(NULLIF(src.lead_state,       ''), tgt.lead_state),
    tgt.lead_status             = COALESCE(NULLIF(src.lead_status,      ''), tgt.lead_status),
    tgt.lead_source_system_id   = COALESCE(NULLIF(src.lead_source_system_id, ''), tgt.lead_source_system_id),
    tgt.lead_source_system      = COALESCE(NULLIF(src.lead_source_system,    ''), tgt.lead_source_system),
    tgt.lead_last_activity_date = GREATEST(COALESCE(src.lead_last_activity_date, tgt.lead_last_activity_date),
                                           tgt.lead_last_activity_date),
    tgt.modified_timestamp      = current_timestamp()
WHEN NOT MATCHED THEN INSERT (
    lead_first_name, lead_last_name, lead_email,
    lead_telephone1, lead_telephone2, lead_mobilephone,
    lead_initial_referral_source, lead_created_on, lead_created_by,
    lead_state, lead_status, lead_preferred_location, lead_move_in_date,
    lead_source_system_id, lead_source_system, lead_last_activity_date,
    created_timestamp, modified_timestamp, exclusion_flag
) VALUES (
    src.lead_first_name, src.lead_last_name, src.lead_email,
    src.lead_telephone1, src.lead_telephone2, src.lead_mobilephone,
    src.lead_initial_referral_source, src.lead_created_on, src.lead_created_by,
    src.lead_state, src.lead_status, src.lead_preferred_location, src.lead_move_in_date,
    src.lead_source_system_id, src.lead_source_system, src.lead_last_activity_date,
    current_timestamp(), current_timestamp(), 0
);""");


# COMMAND ----------

# # Adds in leads from EliseAI that do not exist in 4Ops

# spark.sql(f"""
# INSERT INTO {UNGOV_TABLE}.{OUTREACH_SCHEMA}.dim_lead
# (lead_first_name, lead_last_name, lead_email, lead_telephone1, lead_telephone2, 
# lead_mobilephone, lead_initial_referral_source, lead_created_on, lead_created_by, 
# lead_state, lead_status, lead_preferred_location, lead_move_in_date, 
# lead_source_system_id, lead_source_system, lead_last_activity_date, 
# created_timestamp, modified_timestamp)
# WITH unified_communications AS (
#     SELECT 
#         m.EXTERNAL_PROSPECT_ID,
#         ae.LEAD_FIRST_NAME,
#         ae.LEAD_LAST_NAME,
#         LOWER(TRIM(ae.LEAD_EMAIL)) as LEAD_EMAIL,

#         CASE 
#             WHEN ae.LEAD_PHONE_NUMBER IS NULL OR TRIM(ae.LEAD_PHONE_NUMBER) = '' THEN ''
#             WHEN LENGTH(REGEXP_REPLACE(ae.LEAD_PHONE_NUMBER, '[^0-9]', '')) = 11 
#                 AND LEFT(REGEXP_REPLACE(ae.LEAD_PHONE_NUMBER, '[^0-9]', ''), 1) = '1' 
#             THEN CONCAT('+1', SUBSTRING(REGEXP_REPLACE(ae.LEAD_PHONE_NUMBER, '[^0-9]', ''), 2))
#             WHEN LENGTH(REGEXP_REPLACE(ae.LEAD_PHONE_NUMBER, '[^0-9]', '')) = 10 
#             THEN CONCAT('+1', REGEXP_REPLACE(ae.LEAD_PHONE_NUMBER, '[^0-9]', ''))
#             WHEN LENGTH(REGEXP_REPLACE(ae.LEAD_PHONE_NUMBER, '[^0-9]', '')) > 11
#             THEN CONCAT('+', REGEXP_REPLACE(ae.LEAD_PHONE_NUMBER, '[^0-9]', ''))
#             ELSE IFNULL(ae.LEAD_PHONE_NUMBER, '')
#         END as NORMALIZED_PHONE,
#         m.CREATED_AT,
#         m.MESSAGE as communication_content
#     FROM {UNGOV_TABLE}.stg_eliseai.messages m
#     JOIN {UNGOV_TABLE}.stg_eliseai.api_events ae
#         ON m.EVENT_ID = ae.EVENT_ID
#     WHERE m.CREATED_AT >= '2025-01-01' 
#         AND m.CREATED_AT < '2025-02-01'
#         AND ae.LEAD_EMAIL IS NOT NULL
# ),
# unique_prospects AS (
#     SELECT 
#         MIN(uc.CREATED_AT) OVER (PARTITION BY uc.LEAD_EMAIL) as earliest_communication,
#         MAX(uc.CREATED_AT) OVER (PARTITION BY uc.LEAD_EMAIL) as latest_communication,
        
#         uc.LEAD_FIRST_NAME,
#         uc.LEAD_LAST_NAME,
#         uc.LEAD_EMAIL,
#         uc.NORMALIZED_PHONE,
#         uc.EXTERNAL_PROSPECT_ID,
        
#         ROW_NUMBER() OVER(PARTITION BY uc.LEAD_EMAIL ORDER BY uc.CREATED_AT DESC) as rn
#     FROM unified_communications uc
#     WHERE uc.rn = 1
# ),
# communications_without_leads AS (
#     SELECT 
#         up.EXTERNAL_PROSPECT_ID,
#         up.LEAD_FIRST_NAME,
#         up.LEAD_LAST_NAME,
#         up.LEAD_EMAIL,
#         up.NORMALIZED_PHONE,
#         up.earliest_communication,
#         up.latest_communication
#     FROM unique_prospects up
    
#     -- Check if lead already exists via 4ops path (GlobalID â ProspectProperty â Lead)
#     LEFT JOIN {GOV_OTHERS_TABLE}.stg_microsvc.stg_microsvc_globalid_localsystemid lsi
#         ON lsi.GlobalId = up.EXTERNAL_PROSPECT_ID 
#         AND lsi.LocalSystemId = '91092eb3-df01-4de6-aaaa-12c7627f4dfa'
#     LEFT JOIN {GOV_OTHERS_TABLE}.stg_4operations.stg_4operations_ah4r_prospectproperty pp
#         ON pp.id = lsi.LocalSystemValue
#     LEFT JOIN {UNGOV_TABLE}.{OUTREACH_SCHEMA}.dim_lead dl_4ops
#         ON dl_4ops.lead_source_system_id = pp.ah4r_leadid
#         AND dl_4ops.lead_source_system = '4ops'
    
#     -- Check if lead already exists by email (any source system)
#     LEFT JOIN {UNGOV_TABLE}.{OUTREACH_SCHEMA}.dim_lead dl_email
#         ON dl_email.lead_email = up.LEAD_EMAIL
    
#     -- Check if lead already exists by phone number (any source system)
#     -- Only check if we have a valid phone number and no matches found yet
#     LEFT JOIN {UNGOV_TABLE}.{OUTREACH_SCHEMA}.dim_lead dl_phone
#         ON up.NORMALIZED_PHONE != ''
#         AND up.NORMALIZED_PHONE IS NOT NULL
#         AND (dl_phone.lead_telephone1 = up.NORMALIZED_PHONE 
#              OR dl_phone.lead_telephone2 = up.NORMALIZED_PHONE 
#              OR dl_phone.lead_mobilephone = up.NORMALIZED_PHONE)
    
#     WHERE dl_4ops.lead_key IS NULL      -- No 4ops lead found
#         AND dl_email.lead_key IS NULL   -- No email-based lead found
#         AND dl_phone.lead_key IS NULL   -- No phone-based lead found
# )
# SELECT 
#     CASE
#         WHEN cwl.LEAD_FIRST_NAME IS NULL OR TRIM(cwl.LEAD_FIRST_NAME) = '' THEN ''
#         ELSE INITCAP(TRIM(cwl.LEAD_FIRST_NAME))
#     END as lead_first_name,
#     CASE
#         WHEN cwl.LEAD_LAST_NAME IS NULL OR TRIM(cwl.LEAD_LAST_NAME) = '' THEN ''
#         ELSE INITCAP(TRIM(cwl.LEAD_LAST_NAME))
#     END as lead_last_name,

#     cwl.LEAD_EMAIL as lead_email,  -- Already normalized
#     '' as lead_telephone1,
#     '' as lead_telephone2,
#     cwl.NORMALIZED_PHONE as lead_mobilephone,  -- Already normalized
    
#     'EliseAI Communication' as lead_initial_referral_source,
#     CAST(cwl.earliest_communication AS TIMESTAMP) as lead_created_on,
#     'EliseAI' as lead_created_by,
#     '' as lead_state,
#     '' as lead_status,
#     '' as lead_preferred_location,
#     CAST('1900-01-01 00:00:00' AS TIMESTAMP) as lead_move_in_date,
#     '' as lead_source_system_id,
#     'eliseai' as lead_source_system,
#     CAST(cwl.latest_communication AS TIMESTAMP) as lead_last_activity_date,
#     CAST(current_timestamp() AS TIMESTAMP) as created_timestamp,
#     CAST(current_timestamp() AS TIMESTAMP) as modified_timestamp
# FROM communications_without_leads cwl
# """)